package com.sicuanyangguang.javase.array;
/*
* １java中数组是引用数据类型，不属于基本数据类型，数组的父类是object
* ２什么是数组呢？　就是一个容器，可以容纳多个元素。
* ３数组是一组数据的集合，数组当中可以存储基本数据的类型，也可以存储引用数据类型
* ４数组是存储在堆内存当中的。
*　５对于数组当中存储的是Java对象的话，其实是对象的内存地址，在Java中，数组一旦创建，长度不可变
* ６　数组分为一维数组，二维数组，多维数组，所有的数组都有length属性，用来获取元素的个数
* 7 Java中数组的元素要求统一，如int 类型里的就是int 类型的数组，person数组中就是person的数组
* 8 数组在内存方面存储的时候，数组中的元素内存地址是连续的，就是每一个元素是有规则的紧挨着的，数组
* 9 所有的数组都是拿第一个小方框的内存地址作为整个数组对象的内存地址。
* 说白了就是说，数组首元素的地址就是整个数组对象的内存地址。
* 10 数组这种数据结构的优点和缺点分别是什么？
* 优点：查找元素的效率极高，或者说是查询效率最高的一个数据结构
* 数组中不管存储多少个元素，查找的效率都是相同的，因为内存地址是用数学表达式算出来的，可以直接定位，而不是找出来的。
* 缺点： 在随机数组上增加或者删除的时候，效率较低，，因为会涉及到向前或者向后位移的操作，但是对于最后一个元素是
* 没有影响的
* 11 数组中每一个元素都是有下标的，下标是从0开始，最后一个元素的下标是length-1.下标是非常重要的。
*  通过下标取出，或者存储某一个元素，很重要的！！！！！
* 因为内存地址是连续的，所以只要你知道第一个元素的内存地址，就可以知道后面的内存地址，所以
* 第一个元素的内存地址会作为整个数组的内存地址
*
* 如何声明一个数组： int[] a;  //和c语言是有区别的，看到没
* 初始化数组： 静态初始化，和动态初始化
* 静态： int[] a={100,2,3,4,5};
 动态： int[] a=new int [5];//这里的5是表达数组元素的个数。
 * 数组还有一个数组下标越界异常。
*
* */
public class ArrayTest01 {
    public static void main(String[] args) {
     int [] a1={1,100,10,20,55};//静态初始化
        System.out.println("数组的元素个数是"+a1.length);//这里比c简单多了，直接访问个数的话是直接数组名.length
        System.out.println(a1[0]);//这个是取第一个元素，因为第一个元素的下标是0，所以直接取，很简单的。
        a1[0]=111;//把第一个元素重新赋值为111
        System.out.println(a1[0]);
        for(int i=0;i<a1.length;i++)
        {
            System.out.println(a1[i]);//这个就是数组的正序遍历，说白了就是把数组里的元素给输出。
        }
        for(int der=a1.length-1;der>=0;der--)
        {
            System.out.println(a1[der]);//这个是反向遍历，是吧。
        }
    }
}


