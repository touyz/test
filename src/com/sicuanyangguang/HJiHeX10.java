package com.sicuanyangguang;
/*数据结构： 树 ，一个节点 包含了本节点的地址值  ，含有 父节点的地址值和左子节点的地址值和右子节点的地址值
*如果没有子节点的话，所以就是null。二叉树的每一个子节点的数量就是度，二叉树的度就是<=2的，所以最多只能有两个子节点
*，所以被称为二叉树
*树高： 就是数的层数   根节点就是  最顶层的节点 左下方的节点就是左子节点，右节点同上。
*
* 二叉查找树： 又称二叉排序树，二叉搜索树。添加节点有一个规则：   ！！！小的存左边，大的存右边。一样的就不存。
* 二叉树的遍历方式  前序遍历  中序遍历  后序遍历   层序遍历
* 前序遍历  从根节点开始，然后  ，左子点  ，右子点的顺序进行遍历 中  左 右
* 中序遍历： 最重要，最常用   从最左边的子点开始，然后，左子节点 ，当前节点  右子节点的顺寻进行的遍历。 左中右
* 后序遍历： 左右中   左子节点  右子节点   当前的节点
*
* 层序遍历 ： 就是一层一层的进行遍历  从根节点一层一层的进行遍历。
*
* 二叉查找树的弊端： 需要平衡
*
* 平衡二叉树： 任意节点左右子树的高度差不超过1 高度就是层数哈。
*
*平衡二叉树的旋转  好好的理解，这个阿伟说的是很难的。
*
* 当一个二叉树没有平衡的时候，就会触发旋转机制。
* 先找到   ！！第一个！！！  不平衡的点作为支点。把这个点降级。
*原先的右子节点变成新的父节点，并把多余的左子点出让，给已经降级的根节点当右子节点。
*
*
* 右旋：跟左旋的是差不多的。
*
*
*
* 红黑树  ： 以前被称为平衡二叉B树。他的平衡是通过红黑规则进行实现的。
*
* 是一颗二叉查找树，但是不是平衡二叉树，红黑树不是高度平衡的。
*
*红黑规则是： 1 每一个节点不是红色的，就是黑色的
*2 根节点 必须是黑色的。
*3 如果一个节点是红色的，那么他的子节点必须是黑色   不能出现两个红色节点相连的情况。 但是可以两个黑色连在一起。
* 4 如果一个节点没有子节点或者父节点，则该节点相应的指针属性是Nil，这些Nil视为叶节点，每个叶节点（Nil）是黑色的
*5 对每一个节点，从该节点到其所有后代叶节点的简单相对路径上，均包含相同数目的黑色节点。
*
* 添加的节点默认是红色的，因为效率高。
*
* */
public class HJiHeX10 {
}
